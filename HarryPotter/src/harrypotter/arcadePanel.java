
package harrypotter;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;
import java.util.*;
import javax.swing.JOptionPane;

/**
 *
 * @author KELVIN
 */
public class arcadePanel extends javax.swing.JPanel {
    
    player tempP1;
    int npcHpMax;
    int playerMaxHP;
    bot dummy;
    int randomWord;
    int wordAt = 0;
    int stop;
    String wordNow;
    String letterNow;
    int resetPlayer = 2;
    int time = 1000;
    int botTime;
    Timer myTimer;
    public arcadePanel() {
        initComponents();
        this.setSize(800,600);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();

        setLayout(null);

        jPanel1.setBackground(new java.awt.Color(51, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(102, 51, 0)));
        jPanel1.setForeground(new java.awt.Color(153, 0, 0));
        jPanel1.setLayout(null);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(1);
        jTextArea1.setRows(1);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(290, 30, 476, 30);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(1);
        jTextArea2.setRows(1);
        jScrollPane2.setViewportView(jTextArea2);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(290, 90, 476, 30);

        jLabel4.setFont(new java.awt.Font("Tekton Pro Cond", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("NPC");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(290, 70, 360, 19);

        jLabel5.setFont(new java.awt.Font("Tekton Pro Cond", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("PLAYERNAME");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(290, 10, 360, 19);

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("2");
        jPanel1.add(jLabel15);
        jLabel15.setBounds(720, 10, 40, 20);

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(20, 20, 240, 96);

        add(jPanel1);
        jPanel1.setBounds(10, 460, 780, 130);

        jPanel2.setBackground(new java.awt.Color(51, 0, 0));
        jPanel2.setLayout(null);

        jLabel6.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 255, 102));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("NPC_HP/NPC_HP_MAX");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(10, 10, 310, 20);

        add(jPanel2);
        jPanel2.setBounds(450, 20, 330, 40);

        jPanel3.setBackground(new java.awt.Color(0, 51, 0));
        jPanel3.setLayout(null);

        jLabel7.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 255, 102));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("PlayerHP/PlayerHPMax");
        jPanel3.add(jLabel7);
        jLabel7.setBounds(10, 10, 310, 20);

        add(jPanel3);
        jPanel3.setBounds(20, 20, 330, 40);

        jLabel8.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 48)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("VS");
        add(jLabel8);
        jLabel8.setBounds(360, 30, 80, 40);
        add(jLabel9);
        jLabel9.setBounds(550, 150, 200, 300);
        add(jLabel10);
        jLabel10.setBounds(50, 150, 200, 300);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel11.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("PlayerName");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        add(jPanel6);
        jPanel6.setBounds(20, 60, 160, 20);

        jPanel7.setBackground(new java.awt.Color(0, 0, 0));

        jLabel12.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("NPC_Name");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        add(jPanel7);
        jPanel7.setBounds(610, 60, 170, 20);
    }// </editor-fold>//GEN-END:initComponents
    public void keyPressed(){
        String temp = jTextArea1.getText();
        hitBot(temp);
        
        jTextArea1.setText("");
        
    }
    
    public void insertSpell(char e){
        jTextArea1.append(String.valueOf(e));
    }
    public void rebuild(){
        jTextArea1.setText("");
        jTextArea2.setText("");
        mainFrame temp = (mainFrame)this.getParent().getParent().getParent().getParent();
        temp.kodePanel = "ar";
        temp.p1.usedWand = new wand(-1);
        
        jTextArea3.setText(temp.p1.usedItem[0].nama+"\n"+temp.p1.usedItem[1].nama+"\n"+temp.p1.usedItem[2].nama);
        //PLAYER
        int level = temp.p1.level;
        tempP1 = (player) temp.p1.clone();
        tempP1.hp = 10000;
        System.out.println("HP : "+temp.p1.hp);
        System.out.println("HPTEMP : "+tempP1.hp);
        //SET ITEM
        usable item1 = temp.p1.usedItem[0];
        usable item2 = temp.p1.usedItem[1];
        usable item3 = temp.p1.usedItem[2];
        if(item1.idEffect == 0){
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.02);
        }else if(item1.idEffect==1)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.05);
        }else if(item1.idEffect==2)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.35);
        }else if(item1.idEffect==3)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.6);
        }else if(item1.idEffect==4)
        {
            tempP1.hp+=(int)(tempP1.hp*0.35);
            tempP1.basicAtk+=(int)(tempP1.basicAtk*0.4);
        }else if(item1.idEffect==5)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.4);
            tempP1.hp+=(int)(tempP1.hp*0.4);
            tempP1.basicAtk+=(int)(tempP1.basicAtk*0.4);
        }else if(item1.idEffect==6)
        {
            dummy.goldDrop+=(int)(dummy.goldDrop*0.3);
        }else if(item1.idEffect==7)
        {
            tempP1.str+=100;
            tempP1.hp+=100*30;
        }else if(item1.idEffect==8)
        {
            tempP1.intel+=100;
            tempP1.magicDmg+=100*30;
        }else if(item1.idEffect==9)
        {
            tempP1.agi+=100;
            tempP1.basicAtk+=100*30;
        }
        
        if(item2.idEffect == 0){
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.02);
        }else if(item2.idEffect==1)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.05);
        }else if(item2.idEffect==2)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.35);
        }else if(item2.idEffect==3)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.6);
        }else if(item2.idEffect==4)
        {
            tempP1.hp+=(int)(tempP1.hp*0.35);
            tempP1.basicAtk+=(int)(tempP1.basicAtk*0.4);
        }else if(item2.idEffect==5)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.4);
            tempP1.hp+=(int)(tempP1.hp*0.4);
            tempP1.basicAtk+=(int)(tempP1.basicAtk*0.4);
        }else if(item2.idEffect==6)
        {
            dummy.goldDrop+=(int)(dummy.goldDrop*0.3);
        }else if(item2.idEffect==7)
        {
            tempP1.str+=100;
            tempP1.hp+=100*30;
        }else if(item2.idEffect==8)
        {
            tempP1.intel+=100;
            tempP1.magicDmg+=100*30;
        }else if(item2.idEffect==9)
        {
            tempP1.agi+=100;
            tempP1.basicAtk+=100*30;
        }
        
          if(item3.idEffect == 0){
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.02);
        }else if(item3.idEffect==1)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.05);
        }else if(item3.idEffect==2)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.35);
        }else if(item3.idEffect==3)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.6);
        }else if(item3.idEffect==4)
        {
            tempP1.hp+=(int)(tempP1.hp*0.35);
            tempP1.basicAtk+=(int)(tempP1.basicAtk*0.4);
        }else if(item3.idEffect==5)
        {
            tempP1.magicDmg+=(int)(tempP1.magicDmg*0.4);
            tempP1.hp+=(int)(tempP1.hp*0.4);
            tempP1.basicAtk+=(int)(tempP1.basicAtk*0.4);
        }else if(item3.idEffect==6)
        {
            dummy.goldDrop+=(int)(dummy.goldDrop*0.3);
        }else if(item3.idEffect==7)
        {
            tempP1.str+=100;
            tempP1.hp+=100*30;
        }else if(item3.idEffect==8)
        {
            tempP1.intel+=100;
            tempP1.magicDmg+=100*30;
        }else if(item3.idEffect==9)
        {
            tempP1.agi+=100;
            tempP1.basicAtk+=100*30;
        }
        
        
        
        
        playerMaxHP = tempP1.hp;
        jLabel7.setText(tempP1.hp+"/"+temp.p1.hp);
        jLabel11.setText(tempP1.nama);
        ImageIcon player = new ImageIcon("Image/playerArena.png");
        jLabel10.setIcon(player);
        //RANDOM BOT
        int random = 1;
        if(level >= 3){
            random = 2;
        }
        if(level >= 6){
            random = 3;
        }
        if(level >=9){
            random=4;
        }
        if(level>=12){
            random=5;
        }
        if(level>=21){
            random=6;
        }
        if(level>=23){
            random=7;
        }
        if(level>=28){
            random=8;
        }
        if(level>=33){
            random=9;
        }
        if(level>=35){
            random=10;
        }
        if(level>=36){
            random=11;
        }
        if(level>=40)
        {
            random=12;
        }else if(level>=43){
            random=13;
        }else if(level>=46){
            random=14;
        }else if(level>=50){
            random=15;
        }
        int BotID = 0;
        
        BotID = (int)(Math.random()*random)+1;
        
        
        
        
        //BOT
        System.out.println(BotID);
        dummy = new bot(BotID);
        if(BotID == 1){
            ImageIcon dummy = new ImageIcon("Image/npc1.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 2){
            ImageIcon dummy = new ImageIcon("Image/npc2.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 3){
            ImageIcon dummy = new ImageIcon("Image/npc3.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 4){
            ImageIcon dummy = new ImageIcon("Image/npc4.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 5){
            ImageIcon dummy = new ImageIcon("Image/npc5.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 6){
            ImageIcon dummy = new ImageIcon("Image/npc6.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 7){
            ImageIcon dummy = new ImageIcon("Image/npc7.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 8){
            ImageIcon dummy = new ImageIcon("Image/npc8.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 9){
            ImageIcon dummy = new ImageIcon("Image/npc9.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 10){
            ImageIcon dummy = new ImageIcon("Image/npc10.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 11){
            ImageIcon dummy = new ImageIcon("Image/npc11.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 12){
            ImageIcon dummy = new ImageIcon("Image/npc12.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 13){
            ImageIcon dummy = new ImageIcon("Image/npc13.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 14){
            ImageIcon dummy = new ImageIcon("Image/npc14.png");
            jLabel9.setIcon(dummy);
        }else if(BotID == 15){
            ImageIcon dummy = new ImageIcon("Image/npc15.png");
            jLabel9.setIcon(dummy);
        }
        
        npcHpMax = dummy.hp;
        jLabel6.setText(dummy.hp+"/"+npcHpMax);
        jLabel12.setText(dummy.nama);
        ArrayList<String> botSpell = dummy.spell;
        botTime = dummy.spd;
        wordAt = 0;
        int randomWord = (int)(Math.random()*dummy.spell.size());
        System.out.println(randomWord);
        System.out.println(botSpell.size());
        wordNow = botSpell.get(randomWord);
        //BACKGROUND ON THE LAST ORDER
        ImageIcon raw1 = new ImageIcon("Image/BackgroundArena.jpeg");
        Image img1 = raw1.getImage();
        Image newImg1 = img1.getScaledInstance(800, 600, Image.SCALE_SMOOTH);
        ImageIcon finalImage1 = new ImageIcon(newImg1);
        JLabel lblBackground = new JLabel(finalImage1);
        
        lblBackground.setBounds(0, 0, 800, 600);
        this.add(lblBackground);
        
        
        //GAME SYSTEM
        
        //PLAYER RESET TIME
        myTimer = new Timer(time,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                
                if(resetPlayer > 0){
                    resetPlayer--;
                }else{
                    resetPlayer = 2;
                    jTextArea1.setText("");
                }
                System.out.println(resetPlayer);
                jLabel15.setText(String.valueOf(resetPlayer));
            }
        });
        myTimer.start();
        
        //BOT THREAD
        Timer botTimer = new Timer(botTime,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(wordAt >= wordNow.length()){
                    String tempSpell = jTextArea2.getText();
                    hitPlayer(tempSpell);
                    randomBot();
                    jTextArea2.setText("");
                }else{
                    String letter = String.valueOf(wordNow.charAt(wordAt));
                    jTextArea2.append(letter);
                    wordAt++;
                }
            }
        });
        botTimer.start();
        
        Timer winTimer = new Timer(1, new ActionListener(){
           @Override
           public void actionPerformed(ActionEvent e){
               if(dummy.hp <= 0 || tempP1.hp <= 0){
                   if(dummy.hp <= 0){
                       JOptionPane.showMessageDialog(null, "YOU WIN!\n you got : \n"+dummy.goldDrop+"G\n"+dummy.xpDrop+"EXP");
                       myTimer.stop();
                       botTimer.stop();
                       temp.p1.gold += dummy.goldDrop;
                       temp.p1.xp += dummy.xpDrop;
                       temp.goToArcade();
                   }else if(tempP1.hp <= 0){
                       JOptionPane.showMessageDialog(null, "YOU LOSE!\nBack to Main Menu.");
                       myTimer.stop();
                       botTimer.stop();
                       temp.goToMainMenu();
                   }
                   
                   Timer x = (Timer)e.getSource();
                   x.stop();
               }
           }
        });
        winTimer.start();
    }
    public void randomBot(){
        wordAt = 0;
        int randomWord = (int)(Math.random()*dummy.spell.size());
        wordNow = dummy.spell.get(randomWord);
    }
    
    public void hitBot(String spell){
        mainFrame temp = (mainFrame)this.getParent().getParent().getParent().getParent();
        int cekSpell =  1;
        
        if(spell.equals("incendio")){
            dummy.hp -= 200+temp.p1.magicDmg;
        }else if(spell.equals("petrificus totalus")){
            stop = 1800;
            botTime = 0;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    botTime = dummy.spd;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
        }else if(spell.equals("attack")){
            dummy.hp -= temp.p1.basicAtk;
        }else if(spell.equals("run")){
            tempP1.hp = 0;
        }else if(spell.equals("lumos")){
            stop = 1200;
            botTime = 0;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    botTime = dummy.spd;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
        }else if(spell.equals("wingardium leviosa")){
            stop = 800;
            botTime = 0;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    botTime = dummy.spd;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
            dummy.hp -= 320;
        }else if(spell.equals("diffindo")){
            int dmg = 310 + tempP1.magicDmg;
            dummy.hp -= dmg;
        }else if(spell.equals("confundo")){
            stop = 3600;
            botTime = 0;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    botTime = dummy.spd;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
        }else if(spell.equals("protego")){
            
        }else if(spell.equals("riddikulus")){
            stop = 2200;
            botTime = 0;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    botTime = dummy.spd;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
        }else if(spell.equals("bombarda")){
            int dmg = 400 + tempP1.magicDmg;
            dummy.hp -= dmg;
        }else if(spell.equals("bombarda maxima")){
            int dmg = 510 + tempP1.magicDmg;
            dummy.hp -= dmg;
        }else if(spell.equals("sectumsempra")){
            int dmg = 5*tempP1.magicDmg;
            dummy.hp -= dmg;
        }else if(spell.equals("confringo")){
            int dmg = 580 + tempP1.magicDmg;
            dummy.hp -= dmg;
        }else if(spell.equals("diminuendo")){
            stop = 4800;
            botTime = 0;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    botTime = dummy.spd;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
        }else if(spell.equals("episkey")){
            int heal = 320 + tempP1.intel*2;
            tempP1.hp += heal;
        }else if(spell.equals("fiendfyre")){
            int dmg = 12*tempP1.magicDmg;
            dummy.hp -= dmg;
        }else if(spell.equals("firestorm")){
            int dmg = 16*tempP1.magicDmg;
            dummy.hp -= dmg;
        }else if(spell.equals("crucio")){
            stop = 5000;
            botTime = 0;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    botTime = dummy.spd;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
            int dmg = 6*tempP1.magicDmg;
            dummy.hp -= dmg;
        }else if(spell.equals("avada kedavra")){
            int random = (int)(Math.random()*100);
            
            if(random >= 1 && random <= 50){
                dummy.hp = 0;
            }
        }
        
        jLabel6.setText(""+dummy.hp+"/"+npcHpMax);
    }
    public void hitPlayer(String spell){
        mainFrame temp = (mainFrame)this.getParent().getParent().getParent().getParent();
        if(spell.equals("incendio")){
            tempP1.hp -= 200+dummy.magicDmg;
        }else if(spell.equals("attack")){
            tempP1.hp -= dummy.basicAtk;
        }else if(spell.equals("lumos")){
            stop = 1200;
            temp.p1.stop = 1;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    temp.p1.stop = 0;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
        }else if(spell.equals("wingardium leviosa")){
            stop = 800;
            temp.p1.stop = 1;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    temp.p1.stop = 0;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
            tempP1.hp -= 320;
        }else if(spell.equals("diffindo")){
            int dmg = 310 + dummy.magicDmg;
            tempP1.hp -= dmg;
        }else if(spell.equals("confundo")){
            stop = 3600;
            temp.p1.stop = 1;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    temp.p1.stop = 0;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
        }else if(spell.equals("protego")){
            
        }else if(spell.equals("riddikulus")){
            stop = 2200;
            temp.p1.stop = 1;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    temp.p1.stop = 0;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
        }else if(spell.equals("bombarda")){
            int dmg = 400 + dummy.magicDmg;
            tempP1.hp -= dmg;
        }else if(spell.equals("bombarda maxima")){
            int dmg = 510 + dummy.magicDmg;
            tempP1.hp -= dmg;
        }else if(spell.equals("sectumsempra")){
            int dmg = 5*dummy.magicDmg;
            tempP1.hp -= dmg;
        }else if(spell.equals("confringo")){
            int dmg = 580 + dummy.magicDmg;
            tempP1.hp -= dmg;
        }else if(spell.equals("diminuendo")){
            stop = 4800;
            temp.p1.stop = 1;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    temp.p1.stop = 0;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
        }else if(spell.equals("episkey")){
            int heal = 320 + dummy.intel*2;
            dummy.hp += heal;
        }else if(spell.equals("fiendfyre")){
            int dmg = 12*dummy.magicDmg;
            tempP1.hp -= dmg;
        }else if(spell.equals("firestorm")){
            int dmg = 16*dummy.magicDmg;
            tempP1.hp -= dmg;
        }else if(spell.equals("crucio")){
            stop = 5000;
            temp.p1.stop = 1;
            Timer stun = new Timer(1,new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if(stop == 0){
                    temp.p1.stop = 0;
                    Timer thisTimer  = (Timer)e.getSource();
                    thisTimer.stop();
                }else{
                    stop--;
                }
            }
            });
            int dmg = 6*dummy.magicDmg;
            tempP1.hp -= dmg;
        }else if(spell.equals("avada kedavra")){
            int random = (int)(Math.random()*100);
            
            if(random >= 1 && random <= 50){
                tempP1.hp = 0;
            }
        }
        
        jLabel7.setText(tempP1.hp+"/"+playerMaxHP);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables
}
